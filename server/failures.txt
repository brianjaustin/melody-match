..

  1) test create user renders user when data is valid (MelodyMatchWeb.UserControllerTest)
     test/melody_match_web/controllers/user_controller_test.exs:35
     ** (Phoenix.ActionClauseError) no function clause matching in MelodyMatchWeb.UserController.create/2
     
     The following arguments were given to MelodyMatchWeb.UserController.create/2:
     
         # 1
         %Plug.Conn{adapter: {Plug.Adapters.Test.Conn, :...}, assigns: %{}, before_send: [#Function<0.11227428/1 in Plug.Telemetry.call/2>], body_params: %{"user" => %{"email" => "some@example.com", "name" => "some name", "password" => "some password_hash"}}, cookies: %{}, halted: false, host: "www.example.com", method: "POST", owner: #PID<0.514.0>, params: %{"user" => %{"email" => "some@example.com", "name" => "some name", "password" => "some password_hash"}}, path_info: ["api", "v1", "users"], path_params: %{}, port: 80, private: %{MelodyMatchWeb.Router => {[], %{}}, :phoenix_action => :create, :phoenix_controller => MelodyMatchWeb.UserController, :phoenix_endpoint => MelodyMatchWeb.Endpoint, :phoenix_format => "json", :phoenix_layout => {MelodyMatchWeb.LayoutView, :app}, :phoenix_recycled => true, :phoenix_request_logger => {"request_logger", "request_logger"}, :phoenix_router => MelodyMatchWeb.Router, :phoenix_view => MelodyMatchWeb.UserView, :plug_session_fetch => #Function<1.123471702/1 in Plug.Session.fetch_session/1>, :plug_skip_csrf_protection => true}, query_params: %{}, query_string: "", remote_ip: {127, 0, 0, 1}, req_cookies: %{}, req_headers: [{"accept", "application/json"}, {"content-type", "multipart/mixed; boundary=plug_conn_test"}], request_path: "/api/v1/users", resp_body: nil, resp_cookies: %{}, resp_headers: [{"cache-control", "max-age=0, private, must-revalidate"}, {"x-request-id", "FnQQglPby5AYl5YAAAMi"}, {"access-control-allow-origin", "*"}, {"access-control-expose-headers", ""}, {"access-control-allow-credentials", "true"}], scheme: :http, script_name: [], secret_key_base: :..., state: :unset, status: nil}
     
         # 2
         %{"user" => %{"email" => "some@example.com", "name" => "some name", "password" => "some password_hash"}}
     
     Attempted function clauses (showing 1 out of 1):
     
         def create(conn, -%{"name" => name, "email" => email, "password" => password}-)
     
     code: conn = post(conn, Routes.user_path(conn, :create), user: @create_attrs)
     stacktrace:
       (melody_match 0.1.0) lib/melody_match_web/controllers/user_controller.ex:21: MelodyMatchWeb.UserController.create/2
       (melody_match 0.1.0) lib/melody_match_web/controllers/user_controller.ex:1: MelodyMatchWeb.UserController.action/2
       (melody_match 0.1.0) lib/melody_match_web/controllers/user_controller.ex:1: MelodyMatchWeb.UserController.phoenix_controller_pipeline/2
       (phoenix 1.5.8) lib/phoenix/router.ex:352: Phoenix.Router.__call__/2
       (melody_match 0.1.0) lib/melody_match_web/endpoint.ex:1: MelodyMatchWeb.Endpoint.plug_builder_call/2
       (melody_match 0.1.0) lib/melody_match_web/endpoint.ex:1: MelodyMatchWeb.Endpoint.call/2
       (phoenix 1.5.8) lib/phoenix/test/conn_test.ex:225: Phoenix.ConnTest.dispatch/5
       test/melody_match_web/controllers/user_controller_test.exs:36: (test)



  2) test update user renders user when data is valid (MelodyMatchWeb.UserControllerTest)
     test/melody_match_web/controllers/user_controller_test.exs:57
     ** (Phoenix.ActionClauseError) no function clause matching in MelodyMatchWeb.UserController.update/2
     
     The following arguments were given to MelodyMatchWeb.UserController.update/2:
     
         # 1
         %Plug.Conn{adapter: {Plug.Adapters.Test.Conn, :...}, assigns: %{}, before_send: [#Function<0.11227428/1 in Plug.Telemetry.call/2>], body_params: %{"user" => %{"email" => "some2@example.com", "name" => "some updated name"}}, cookies: %{}, halted: false, host: "www.example.com", method: "PUT", owner: #PID<0.516.0>, params: %{"id" => "137", "user" => %{"email" => "some2@example.com", "name" => "some updated name"}}, path_info: ["api", "v1", "users", "137"], path_params: %{"id" => "137"}, port: 80, private: %{MelodyMatchWeb.Router => {[], %{}}, :phoenix_action => :update, :phoenix_controller => MelodyMatchWeb.UserController, :phoenix_endpoint => MelodyMatchWeb.Endpoint, :phoenix_format => "json", :phoenix_layout => {MelodyMatchWeb.LayoutView, :app}, :phoenix_recycled => true, :phoenix_request_logger => {"request_logger", "request_logger"}, :phoenix_router => MelodyMatchWeb.Router, :phoenix_view => MelodyMatchWeb.UserView, :plug_session_fetch => #Function<1.123471702/1 in Plug.Session.fetch_session/1>, :plug_skip_csrf_protection => true}, query_params: %{}, query_string: "", remote_ip: {127, 0, 0, 1}, req_cookies: %{}, req_headers: [{"accept", "application/json"}, {"content-type", "multipart/mixed; boundary=plug_conn_test"}], request_path: "/api/v1/users/137", resp_body: nil, resp_cookies: %{}, resp_headers: [{"cache-control", "max-age=0, private, must-revalidate"}, {"x-request-id", "FnQQglu7gnGpXQgAAARh"}, {"access-control-allow-origin", "*"}, {"access-control-expose-headers", ""}, {"access-control-allow-credentials", "true"}], scheme: :http, script_name: [], secret_key_base: :..., state: :unset, status: nil}
     
         # 2
         %{"id" => "137", "user" => %{"email" => "some2@example.com", "name" => "some updated name"}}
     
     Attempted function clauses (showing 1 out of 1):
     
         def update(conn, -%{"id" => id, "name" => name, "email" => email, "password" => password, "location" => location}-)
     
     code: conn = put(conn, Routes.user_path(conn, :update, user), user: @update_attrs)
     stacktrace:
       (melody_match 0.1.0) lib/melody_match_web/controllers/user_controller.ex:37: MelodyMatchWeb.UserController.update/2
       (melody_match 0.1.0) lib/melody_match_web/controllers/user_controller.ex:1: MelodyMatchWeb.UserController.action/2
       (melody_match 0.1.0) lib/melody_match_web/controllers/user_controller.ex:1: MelodyMatchWeb.UserController.phoenix_controller_pipeline/2
       (phoenix 1.5.8) lib/phoenix/router.ex:352: Phoenix.Router.__call__/2
       (melody_match 0.1.0) lib/melody_match_web/endpoint.ex:1: MelodyMatchWeb.Endpoint.plug_builder_call/2
       (melody_match 0.1.0) lib/melody_match_web/endpoint.ex:1: MelodyMatchWeb.Endpoint.call/2
       (phoenix 1.5.8) lib/phoenix/test/conn_test.ex:225: Phoenix.ConnTest.dispatch/5
       test/melody_match_web/controllers/user_controller_test.exs:58: (test)



  3) test create user renders errors when data is invalid (MelodyMatchWeb.UserControllerTest)
     test/melody_match_web/controllers/user_controller_test.exs:48
     ** (Phoenix.ActionClauseError) no function clause matching in MelodyMatchWeb.UserController.create/2
     
     The following arguments were given to MelodyMatchWeb.UserController.create/2:
     
         # 1
         %Plug.Conn{adapter: {Plug.Adapters.Test.Conn, :...}, assigns: %{}, before_send: [#Function<0.11227428/1 in Plug.Telemetry.call/2>], body_params: %{"user" => %{"email" => nil, "name" => nil}}, cookies: %{}, halted: false, host: "www.example.com", method: "POST", owner: #PID<0.519.0>, params: %{"user" => %{"email" => nil, "name" => nil}}, path_info: ["api", "v1", "users"], path_params: %{}, port: 80, private: %{MelodyMatchWeb.Router => {[], %{}}, :phoenix_action => :create, :phoenix_controller => MelodyMatchWeb.UserController, :phoenix_endpoint => MelodyMatchWeb.Endpoint, :phoenix_format => "json", :phoenix_layout => {MelodyMatchWeb.LayoutView, :app}, :phoenix_recycled => true, :phoenix_request_logger => {"request_logger", "request_logger"}, :phoenix_router => MelodyMatchWeb.Router, :phoenix_view => MelodyMatchWeb.UserView, :plug_session_fetch => #Function<1.123471702/1 in Plug.Session.fetch_session/1>, :plug_skip_csrf_protection => true}, query_params: %{}, query_string: "", remote_ip: {127, 0, 0, 1}, req_cookies: %{}, req_headers: [{"accept", "application/json"}, {"content-type", "multipart/mixed; boundary=plug_conn_test"}], request_path: "/api/v1/users", resp_body: nil, resp_cookies: %{}, resp_headers: [{"cache-control", "max-age=0, private, must-revalidate"}, {"x-request-id", "FnQQglvLJKvKGfsAAAMy"}, {"access-control-allow-origin", "*"}, {"access-control-expose-headers", ""}, {"access-control-allow-credentials", "true"}], scheme: :http, script_name: [], secret_key_base: :..., state: :unset, status: nil}
     
         # 2
         %{"user" => %{"email" => nil, "name" => nil}}
     
     Attempted function clauses (showing 1 out of 1):
     
         def create(conn, -%{"name" => name, "email" => email, "password" => password}-)
     
     code: conn = post(conn, Routes.user_path(conn, :create), user: @invalid_attrs)
     stacktrace:
       (melody_match 0.1.0) lib/melody_match_web/controllers/user_controller.ex:21: MelodyMatchWeb.UserController.create/2
       (melody_match 0.1.0) lib/melody_match_web/controllers/user_controller.ex:1: MelodyMatchWeb.UserController.action/2
       (melody_match 0.1.0) lib/melody_match_web/controllers/user_controller.ex:1: MelodyMatchWeb.UserController.phoenix_controller_pipeline/2
       (phoenix 1.5.8) lib/phoenix/router.ex:352: Phoenix.Router.__call__/2
       (melody_match 0.1.0) lib/melody_match_web/endpoint.ex:1: MelodyMatchWeb.Endpoint.plug_builder_call/2
       (melody_match 0.1.0) lib/melody_match_web/endpoint.ex:1: MelodyMatchWeb.Endpoint.call/2
       (phoenix 1.5.8) lib/phoenix/test/conn_test.ex:225: Phoenix.ConnTest.dispatch/5
       test/melody_match_web/controllers/user_controller_test.exs:49: (test)

..

  4) test update user renders errors when data is invalid (MelodyMatchWeb.UserControllerTest)
     test/melody_match_web/controllers/user_controller_test.exs:70
     ** (Phoenix.ActionClauseError) no function clause matching in MelodyMatchWeb.UserController.update/2
     
     The following arguments were given to MelodyMatchWeb.UserController.update/2:
     
         # 1
         %Plug.Conn{adapter: {Plug.Adapters.Test.Conn, :...}, assigns: %{}, before_send: [#Function<0.11227428/1 in Plug.Telemetry.call/2>], body_params: %{"user" => %{"email" => nil, "name" => nil}}, cookies: %{}, halted: false, host: "www.example.com", method: "PUT", owner: #PID<0.525.0>, params: %{"id" => "139", "user" => %{"email" => nil, "name" => nil}}, path_info: ["api", "v1", "users", "139"], path_params: %{"id" => "139"}, port: 80, private: %{MelodyMatchWeb.Router => {[], %{}}, :phoenix_action => :update, :phoenix_controller => MelodyMatchWeb.UserController, :phoenix_endpoint => MelodyMatchWeb.Endpoint, :phoenix_format => "json", :phoenix_layout => {MelodyMatchWeb.LayoutView, :app}, :phoenix_recycled => true, :phoenix_request_logger => {"request_logger", "request_logger"}, :phoenix_router => MelodyMatchWeb.Router, :phoenix_view => MelodyMatchWeb.UserView, :plug_session_fetch => #Function<1.123471702/1 in Plug.Session.fetch_session/1>, :plug_skip_csrf_protection => true}, query_params: %{}, query_string: "", remote_ip: {127, 0, 0, 1}, req_cookies: %{}, req_headers: [{"accept", "application/json"}, {"content-type", "multipart/mixed; boundary=plug_conn_test"}], request_path: "/api/v1/users/139", resp_body: nil, resp_cookies: %{}, resp_headers: [{"cache-control", "max-age=0, private, must-revalidate"}, {"x-request-id", "FnQQgl6miGP9eEQAAAOS"}, {"access-control-allow-origin", "*"}, {"access-control-expose-headers", ""}, {"access-control-allow-credentials", "true"}], scheme: :http, script_name: [], secret_key_base: :..., state: :unset, status: nil}
     
         # 2
         %{"id" => "139", "user" => %{"email" => nil, "name" => nil}}
     
     Attempted function clauses (showing 1 out of 1):
     
         def update(conn, -%{"id" => id, "name" => name, "email" => email, "password" => password, "location" => location}-)
     
     code: conn = put(conn, Routes.user_path(conn, :update, user), user: @invalid_attrs)
     stacktrace:
       (melody_match 0.1.0) lib/melody_match_web/controllers/user_controller.ex:37: MelodyMatchWeb.UserController.update/2
       (melody_match 0.1.0) lib/melody_match_web/controllers/user_controller.ex:1: MelodyMatchWeb.UserController.action/2
       (melody_match 0.1.0) lib/melody_match_web/controllers/user_controller.ex:1: MelodyMatchWeb.UserController.phoenix_controller_pipeline/2
       (phoenix 1.5.8) lib/phoenix/router.ex:352: Phoenix.Router.__call__/2
       (melody_match 0.1.0) lib/melody_match_web/endpoint.ex:1: MelodyMatchWeb.Endpoint.plug_builder_call/2
       (melody_match 0.1.0) lib/melody_match_web/endpoint.ex:1: MelodyMatchWeb.Endpoint.call/2
       (phoenix 1.5.8) lib/phoenix/test/conn_test.ex:225: Phoenix.ConnTest.dispatch/5
       test/melody_match_web/controllers/user_controller_test.exs:71: (test)

..........................................................

Finished in 1.3 seconds
4 doctests, 62 tests, 4 failures

Randomized with seed 162445
